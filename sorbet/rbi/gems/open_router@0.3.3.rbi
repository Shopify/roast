# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `open_router` gem.
# Please instead update this file by running `bin/tapioca gem open_router`.


# source://open_router//lib/open_router/http.rb#3
module OpenRouter
  class << self
    # source://open_router//lib/open_router.rb#54
    def configuration; end

    # Sets the attribute configuration
    #
    # @param value the value to set the attribute configuration to.
    #
    # source://open_router//lib/open_router.rb#51
    def configuration=(_arg0); end

    # @yield [configuration]
    #
    # source://open_router//lib/open_router.rb#58
    def configure; end
  end
end

# source://open_router//lib/open_router/client.rb#11
class OpenRouter::Client
  include ::OpenRouter::HTTP

  # Initializes the client with optional configurations.
  #
  # @return [Client] a new instance of Client
  # @yield [OpenRouter.configuration]
  #
  # source://open_router//lib/open_router/client.rb#15
  def initialize(access_token: T.unsafe(nil), request_timeout: T.unsafe(nil), uri_base: T.unsafe(nil), extra_headers: T.unsafe(nil)); end

  # Performs a chat completion request to the OpenRouter API.
  #
  # @param messages [Array<Hash>] Array of message hashes with role and content, like [{role: "user", content: "What is the meaning of life?"}]
  # @param model [String|Array] Model identifier, or array of model identifiers if you want to fallback to the next model in case of failure
  # @param providers [Array<String>] Optional array of provider identifiers, ordered by priority
  # @param transforms [Array<String>] Optional array of strings that tell OpenRouter to apply a series of transformations to the prompt before sending it to the model. Transformations are applied in-order
  # @param extras [Hash] Optional hash of model-specific parameters to send to the OpenRouter API
  # @param stream [Proc, nil] Optional callable object for streaming
  # @return [Hash] The completion response.
  #
  # source://open_router//lib/open_router/client.rb#31
  def complete(messages, model: T.unsafe(nil), providers: T.unsafe(nil), transforms: T.unsafe(nil), extras: T.unsafe(nil), stream: T.unsafe(nil)); end

  # Fetches the list of available models from the OpenRouter API.
  #
  # @return [Array<Hash>] The list of models.
  #
  # source://open_router//lib/open_router/client.rb#54
  def models; end

  # Queries the generation stats for a given id.
  #
  # @param generation_id [String] The generation id returned from a previous request.
  # @return [Hash] The stats including token counts and cost.
  #
  # source://open_router//lib/open_router/client.rb#61
  def query_generation_stats(generation_id); end
end

# source://open_router//lib/open_router.rb#14
class OpenRouter::Configuration
  # @return [Configuration] a new instance of Configuration
  #
  # source://open_router//lib/open_router.rb#22
  def initialize; end

  # @raise [ConfigurationError]
  #
  # source://open_router//lib/open_router.rb#31
  def access_token; end

  # Sets the attribute access_token
  #
  # @param value the value to set the attribute access_token to.
  #
  # source://open_router//lib/open_router.rb#15
  def access_token=(_arg0); end

  # Returns the value of attribute api_version.
  #
  # source://open_router//lib/open_router.rb#16
  def api_version; end

  # Sets the attribute api_version
  #
  # @param value the value to set the attribute api_version to.
  #
  # source://open_router//lib/open_router.rb#16
  def api_version=(_arg0); end

  # Returns the value of attribute extra_headers.
  #
  # source://open_router//lib/open_router.rb#16
  def extra_headers; end

  # Sets the attribute extra_headers
  #
  # @param value the value to set the attribute extra_headers to.
  #
  # source://open_router//lib/open_router.rb#16
  def extra_headers=(_arg0); end

  # source://open_router//lib/open_router.rb#37
  def faraday(&block); end

  # Returns the value of attribute faraday_config.
  #
  # source://open_router//lib/open_router.rb#16
  def faraday_config; end

  # Sets the attribute faraday_config
  #
  # @param value the value to set the attribute faraday_config to.
  #
  # source://open_router//lib/open_router.rb#16
  def faraday_config=(_arg0); end

  # Returns the value of attribute log_errors.
  #
  # source://open_router//lib/open_router.rb#16
  def log_errors; end

  # Sets the attribute log_errors
  #
  # @param value the value to set the attribute log_errors to.
  #
  # source://open_router//lib/open_router.rb#16
  def log_errors=(_arg0); end

  # Returns the value of attribute request_timeout.
  #
  # source://open_router//lib/open_router.rb#16
  def request_timeout; end

  # Sets the attribute request_timeout
  #
  # @param value the value to set the attribute request_timeout to.
  #
  # source://open_router//lib/open_router.rb#16
  def request_timeout=(_arg0); end

  # source://open_router//lib/open_router.rb#41
  def site_name=(value); end

  # source://open_router//lib/open_router.rb#45
  def site_url=(value); end

  # Returns the value of attribute uri_base.
  #
  # source://open_router//lib/open_router.rb#16
  def uri_base; end

  # Sets the attribute uri_base
  #
  # @param value the value to set the attribute uri_base to.
  #
  # source://open_router//lib/open_router.rb#16
  def uri_base=(_arg0); end
end

# source://open_router//lib/open_router.rb#18
OpenRouter::Configuration::DEFAULT_API_VERSION = T.let(T.unsafe(nil), String)

# source://open_router//lib/open_router.rb#19
OpenRouter::Configuration::DEFAULT_REQUEST_TIMEOUT = T.let(T.unsafe(nil), Integer)

# source://open_router//lib/open_router.rb#20
OpenRouter::Configuration::DEFAULT_URI_BASE = T.let(T.unsafe(nil), String)

# source://open_router//lib/open_router.rb#12
class OpenRouter::ConfigurationError < ::OpenRouter::Error; end

# source://open_router//lib/open_router.rb#11
class OpenRouter::Error < ::StandardError; end

# source://open_router//lib/open_router/http.rb#4
module OpenRouter::HTTP
  # source://open_router//lib/open_router/http.rb#30
  def delete(path:); end

  # source://open_router//lib/open_router/http.rb#5
  def get(path:); end

  # source://open_router//lib/open_router/http.rb#23
  def multipart_post(path:, parameters: T.unsafe(nil)); end

  # source://open_router//lib/open_router/http.rb#11
  def post(path:, parameters:); end

  private

  # source://open_router//lib/open_router/http.rb#56
  def conn(multipart: T.unsafe(nil)); end

  # source://open_router//lib/open_router/http.rb#72
  def headers; end

  # source://open_router//lib/open_router/http.rb#81
  def multipart_parameters(parameters); end

  # Given a proc, returns an outer proc that can be used to iterate over a JSON stream of chunks.
  # For each chunk, the inner user_proc is called giving it the JSON object. The JSON object could
  # be a data object or an error object as described in the OpenRouter API documentation.
  #
  # If the JSON object for a given data or error message is invalid, it is ignored.
  #
  # @param user_proc [Proc] The inner proc to call for each JSON object in the chunk.
  # @return [Proc] An outer proc that iterates over a raw stream, converting it to JSON.
  #
  # source://open_router//lib/open_router/http.rb#46
  def to_json_stream(user_proc:); end

  # source://open_router//lib/open_router/http.rb#68
  def uri(path:); end
end

# source://open_router//lib/open_router/client.rb#9
class OpenRouter::ServerError < ::StandardError; end

# source://open_router//lib/open_router/version.rb#4
OpenRouter::VERSION = T.let(T.unsafe(nil), String)
