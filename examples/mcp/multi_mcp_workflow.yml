# Multi-MCP Integration Example
# This workflow combines multiple MCP tools with traditional Roast tools

name: Code Review Assistant
model: gpt-4o-mini
target: "README.md"  # Use a static file for testing

tools:
  # Traditional Roast tools
  - Roast::Tools::ReadFile
  - Roast::Tools::Grep
  - Roast::Tools::WriteFile
  
  # Multiple MCP tools
  # - GitDocs:
  #     url: https://gitmcp.io/{{ENV['REPO_OWNER']}}/{{ENV['REPO_NAME']}}/docs
  #     env:
  #       Accept: application/json
  
  # GitHub MCP (requires GITHUB_TOKEN environment variable)
  # Uncomment to use:
  # - GitHub:
  #     command: npx
  #     args: ["-y", "@modelcontextprotocol/server-github"]
  #     env:
  #       GITHUB_PERSONAL_ACCESS_TOKEN: "{{ENV['GITHUB_TOKEN']}}"
  #     only:
  #       - get_pull_request
  #       - create_pull_request_comment
  #       - get_file_content
  
  # Filesystem MCP (no auth required)
  - FileSystem:
      command: npx
      args: ["-y", "@modelcontextprotocol/server-filesystem", "."]
      only:
        - read_file
        - list_directory
  
  # - Linter:
  #     command: ./custom-linter-mcp
  #     env:
  #       CONFIG_PATH: "{{ENV['LINTER_CONFIG']}}"
  #     only:
  #       - analyze_code
  #       - suggest_fixes

steps:
  - test_read
  - test_filesystem

test_read:
  prompt: Use the ReadFile tool to read the README.md file

test_filesystem:
  prompt: |
    Use the FileSystem MCP tool's list_directory function to list the current directory.
    Then pick an interesting file and read it with the read_file function.