# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `raix` gem.
# Please instead update this file by running `bin/tapioca gem raix`.


# The Raix module provides configuration options for the Raix gem.
#
# source://raix//lib/raix/version.rb#3
module Raix
  class << self
    # Returns the current configuration instance.
    #
    # source://raix//lib/raix.rb#19
    def configuration; end

    # Sets the attribute configuration
    #
    # @param value the value to set the attribute configuration to.
    #
    # source://raix//lib/raix.rb#15
    def configuration=(_arg0); end

    # Configures the Raix gem using a block.
    #
    # @yield [configuration]
    #
    # source://raix//lib/raix.rb#24
    def configure; end
  end
end

# The `ChatCompletion` module is a Rails concern that provides a way to interact
# with the OpenRouter Chat Completion API via its client. The module includes a few
# methods that allow you to build a transcript of messages and then send them to
# the API for completion. The API will return a response that you can use however
# you see fit.
#
# When the AI responds with tool function calls instead of a text message, this
# module automatically:
# 1. Executes the requested tool functions
# 2. Adds the function results to the conversation transcript
# 3. Sends the updated transcript back to the AI for another completion
# 4. Repeats this process until the AI responds with a regular text message
#
# This automatic continuation ensures that tool calls are seamlessly integrated
# into the conversation flow. The AI can use tool results to formulate its final
# response to the user. You can limit the number of tool calls using the
# `max_tool_calls` parameter to prevent excessive function invocations.
#
# Tool functions must be defined on the class that includes this module. The
# `FunctionDispatch` module provides a Rails-like DSL for declaring these
# functions at the class level, which is cleaner than implementing them as
# instance methods.
#
# Note that some AI models can make multiple tool function calls in a single
# response. When that happens, the module executes all requested functions
# before continuing the conversation.
#
# source://raix//lib/raix/chat_completion.rb#40
module Raix::ChatCompletion
  extend ::ActiveSupport::Concern

  mixes_in_class_methods ::Raix::ChatCompletion::ClassMethods

  # Returns the value of attribute available_tools.
  #
  # source://raix//lib/raix/chat_completion.rb#43
  def available_tools; end

  # Sets the attribute available_tools
  #
  # @param value the value to set the attribute available_tools to.
  #
  # source://raix//lib/raix/chat_completion.rb#43
  def available_tools=(_arg0); end

  # Returns the value of attribute cache_at.
  #
  # source://raix//lib/raix/chat_completion.rb#43
  def cache_at; end

  # Sets the attribute cache_at
  #
  # @param value the value to set the attribute cache_at to.
  #
  # source://raix//lib/raix/chat_completion.rb#43
  def cache_at=(_arg0); end

  # This method performs chat completion based on the provided transcript and parameters.
  #
  # @option loop
  # @option params
  # @option params
  # @option params
  # @option params
  # @option tools
  # @option max_tool_calls
  # @param params [Hash] The parameters for chat completion.
  # @param loop [Hash] a customizable set of options
  # @param tools [Hash] a customizable set of options
  # @param max_tool_calls [Hash] a customizable set of options
  # @return [String|Hash] The completed chat response.
  #
  # source://raix//lib/raix/chat_completion.rb#76
  def chat_completion(params: T.unsafe(nil), loop: T.unsafe(nil), json: T.unsafe(nil), raw: T.unsafe(nil), openai: T.unsafe(nil), save_response: T.unsafe(nil), messages: T.unsafe(nil), available_tools: T.unsafe(nil), max_tool_calls: T.unsafe(nil)); end

  # Instance level access to the class-level configuration.
  #
  # source://raix//lib/raix/chat_completion.rb#61
  def configuration; end

  # Dispatches a tool function call with the given function name and arguments.
  # This method can be overridden in subclasses to customize how function calls are handled.
  #
  # @param function_name [String] The name of the function to call
  # @param arguments [Hash] The arguments to pass to the function
  # @param cache [ActiveSupport::Cache] Optional cache object
  # @return [Object] The result of the function call
  #
  # source://raix//lib/raix/chat_completion.rb#292
  def dispatch_tool_function(function_name, arguments, cache: T.unsafe(nil)); end

  # Returns the value of attribute frequency_penalty.
  #
  # source://raix//lib/raix/chat_completion.rb#43
  def frequency_penalty; end

  # Sets the attribute frequency_penalty
  #
  # @param value the value to set the attribute frequency_penalty to.
  #
  # source://raix//lib/raix/chat_completion.rb#43
  def frequency_penalty=(_arg0); end

  # Returns the value of attribute logit_bias.
  #
  # source://raix//lib/raix/chat_completion.rb#43
  def logit_bias; end

  # Sets the attribute logit_bias
  #
  # @param value the value to set the attribute logit_bias to.
  #
  # source://raix//lib/raix/chat_completion.rb#43
  def logit_bias=(_arg0); end

  # Returns the value of attribute logprobs.
  #
  # source://raix//lib/raix/chat_completion.rb#43
  def logprobs; end

  # Sets the attribute logprobs
  #
  # @param value the value to set the attribute logprobs to.
  #
  # source://raix//lib/raix/chat_completion.rb#43
  def logprobs=(_arg0); end

  # Returns the value of attribute loop.
  #
  # source://raix//lib/raix/chat_completion.rb#43
  def loop; end

  # Sets the attribute loop
  #
  # @param value the value to set the attribute loop to.
  #
  # source://raix//lib/raix/chat_completion.rb#43
  def loop=(_arg0); end

  # Returns the value of attribute max_completion_tokens.
  #
  # source://raix//lib/raix/chat_completion.rb#43
  def max_completion_tokens; end

  # Sets the attribute max_completion_tokens
  #
  # @param value the value to set the attribute max_completion_tokens to.
  #
  # source://raix//lib/raix/chat_completion.rb#43
  def max_completion_tokens=(_arg0); end

  # Returns the value of attribute max_tokens.
  #
  # source://raix//lib/raix/chat_completion.rb#43
  def max_tokens; end

  # Sets the attribute max_tokens
  #
  # @param value the value to set the attribute max_tokens to.
  #
  # source://raix//lib/raix/chat_completion.rb#43
  def max_tokens=(_arg0); end

  # Returns the value of attribute max_tool_calls.
  #
  # source://raix//lib/raix/chat_completion.rb#43
  def max_tool_calls; end

  # Sets the attribute max_tool_calls
  #
  # @param value the value to set the attribute max_tool_calls to.
  #
  # source://raix//lib/raix/chat_completion.rb#43
  def max_tool_calls=(_arg0); end

  # Returns the value of attribute min_p.
  #
  # source://raix//lib/raix/chat_completion.rb#43
  def min_p; end

  # Sets the attribute min_p
  #
  # @param value the value to set the attribute min_p to.
  #
  # source://raix//lib/raix/chat_completion.rb#43
  def min_p=(_arg0); end

  # Returns the value of attribute model.
  #
  # source://raix//lib/raix/chat_completion.rb#43
  def model; end

  # Sets the attribute model
  #
  # @param value the value to set the attribute model to.
  #
  # source://raix//lib/raix/chat_completion.rb#43
  def model=(_arg0); end

  # Returns the value of attribute prediction.
  #
  # source://raix//lib/raix/chat_completion.rb#43
  def prediction; end

  # Sets the attribute prediction
  #
  # @param value the value to set the attribute prediction to.
  #
  # source://raix//lib/raix/chat_completion.rb#43
  def prediction=(_arg0); end

  # Returns the value of attribute presence_penalty.
  #
  # source://raix//lib/raix/chat_completion.rb#43
  def presence_penalty; end

  # Sets the attribute presence_penalty
  #
  # @param value the value to set the attribute presence_penalty to.
  #
  # source://raix//lib/raix/chat_completion.rb#43
  def presence_penalty=(_arg0); end

  # Returns the value of attribute provider.
  #
  # source://raix//lib/raix/chat_completion.rb#43
  def provider; end

  # Sets the attribute provider
  #
  # @param value the value to set the attribute provider to.
  #
  # source://raix//lib/raix/chat_completion.rb#43
  def provider=(_arg0); end

  # Returns the value of attribute repetition_penalty.
  #
  # source://raix//lib/raix/chat_completion.rb#43
  def repetition_penalty; end

  # Sets the attribute repetition_penalty
  #
  # @param value the value to set the attribute repetition_penalty to.
  #
  # source://raix//lib/raix/chat_completion.rb#43
  def repetition_penalty=(_arg0); end

  # Returns the value of attribute response_format.
  #
  # source://raix//lib/raix/chat_completion.rb#43
  def response_format; end

  # Sets the attribute response_format
  #
  # @param value the value to set the attribute response_format to.
  #
  # source://raix//lib/raix/chat_completion.rb#43
  def response_format=(_arg0); end

  # Returns the value of attribute seed.
  #
  # source://raix//lib/raix/chat_completion.rb#43
  def seed; end

  # Sets the attribute seed
  #
  # @param value the value to set the attribute seed to.
  #
  # source://raix//lib/raix/chat_completion.rb#43
  def seed=(_arg0); end

  # Returns the value of attribute stop.
  #
  # source://raix//lib/raix/chat_completion.rb#43
  def stop; end

  # Sets the attribute stop
  #
  # @param value the value to set the attribute stop to.
  #
  # source://raix//lib/raix/chat_completion.rb#43
  def stop=(_arg0); end

  # Returns the value of attribute stop_tool_calls_and_respond.
  #
  # source://raix//lib/raix/chat_completion.rb#43
  def stop_tool_calls_and_respond; end

  # Sets the attribute stop_tool_calls_and_respond
  #
  # @param value the value to set the attribute stop_tool_calls_and_respond to.
  #
  # source://raix//lib/raix/chat_completion.rb#43
  def stop_tool_calls_and_respond=(_arg0); end

  # Returns the value of attribute stream.
  #
  # source://raix//lib/raix/chat_completion.rb#43
  def stream; end

  # Sets the attribute stream
  #
  # @param value the value to set the attribute stream to.
  #
  # source://raix//lib/raix/chat_completion.rb#43
  def stream=(_arg0); end

  # Returns the value of attribute temperature.
  #
  # source://raix//lib/raix/chat_completion.rb#43
  def temperature; end

  # Sets the attribute temperature
  #
  # @param value the value to set the attribute temperature to.
  #
  # source://raix//lib/raix/chat_completion.rb#43
  def temperature=(_arg0); end

  # Returns the value of attribute tool_choice.
  #
  # source://raix//lib/raix/chat_completion.rb#43
  def tool_choice; end

  # Sets the attribute tool_choice
  #
  # @param value the value to set the attribute tool_choice to.
  #
  # source://raix//lib/raix/chat_completion.rb#43
  def tool_choice=(_arg0); end

  # Returns the value of attribute tools.
  #
  # source://raix//lib/raix/chat_completion.rb#43
  def tools; end

  # Sets the attribute tools
  #
  # @param value the value to set the attribute tools to.
  #
  # source://raix//lib/raix/chat_completion.rb#43
  def tools=(_arg0); end

  # Returns the value of attribute top_a.
  #
  # source://raix//lib/raix/chat_completion.rb#43
  def top_a; end

  # Sets the attribute top_a
  #
  # @param value the value to set the attribute top_a to.
  #
  # source://raix//lib/raix/chat_completion.rb#43
  def top_a=(_arg0); end

  # Returns the value of attribute top_k.
  #
  # source://raix//lib/raix/chat_completion.rb#43
  def top_k; end

  # Sets the attribute top_k
  #
  # @param value the value to set the attribute top_k to.
  #
  # source://raix//lib/raix/chat_completion.rb#43
  def top_k=(_arg0); end

  # Returns the value of attribute top_logprobs.
  #
  # source://raix//lib/raix/chat_completion.rb#43
  def top_logprobs; end

  # Sets the attribute top_logprobs
  #
  # @param value the value to set the attribute top_logprobs to.
  #
  # source://raix//lib/raix/chat_completion.rb#43
  def top_logprobs=(_arg0); end

  # Returns the value of attribute top_p.
  #
  # source://raix//lib/raix/chat_completion.rb#43
  def top_p; end

  # Sets the attribute top_p
  #
  # @param value the value to set the attribute top_p to.
  #
  # source://raix//lib/raix/chat_completion.rb#43
  def top_p=(_arg0); end

  # This method returns the transcript array.
  # Manually add your messages to it in the following abbreviated format
  # before calling `chat_completion`.
  #
  # { system: "You are a pumpkin" },
  # { user: "Hey what time is it?" },
  # { assistant: "Sorry, pumpkins do not wear watches" }
  #
  # to add a function call use the following format:
  # { function: { name: 'fancy_pants_function', arguments: { param: 'value' } } }
  #
  # to add a function result use the following format:
  # { function: result, name: 'fancy_pants_function' }
  #
  # @return [Array] The transcript array.
  #
  # source://raix//lib/raix/chat_completion.rb#281
  def transcript; end

  private

  # @raise [UndeclaredToolError]
  #
  # source://raix//lib/raix/chat_completion.rb#298
  def filtered_tools(tool_names); end

  # source://raix//lib/raix/chat_completion.rb#310
  def openai_request(params:, model:, messages:); end

  # source://raix//lib/raix/chat_completion.rb#326
  def openrouter_request(params:, model:, messages:); end
end

# source://raix//lib/raix/chat_completion.rb#0
module Raix::ChatCompletion::ClassMethods
  # source://raix//lib/raix/chat_completion.rb#50
  def configuration; end

  # source://raix//lib/raix/chat_completion.rb#55
  def configure; end
end

# The Configuration class holds the configuration options for the Raix gem.
#
# source://raix//lib/raix/configuration.rb#5
class Raix::Configuration
  # Initializes a new instance of the Configuration class with default values.
  #
  # @return [Configuration] a new instance of Configuration
  #
  # source://raix//lib/raix/configuration.rb#50
  def initialize(fallback: T.unsafe(nil)); end

  # @return [Boolean]
  #
  # source://raix//lib/raix/configuration.rb#59
  def client?; end

  # source://raix//lib/raix/configuration.rb#7
  def max_completion_tokens; end

  # source://raix//lib/raix/configuration.rb#14
  def max_completion_tokens=(value); end

  # source://raix//lib/raix/configuration.rb#7
  def max_tokens; end

  # source://raix//lib/raix/configuration.rb#14
  def max_tokens=(value); end

  # source://raix//lib/raix/configuration.rb#7
  def max_tool_calls; end

  # source://raix//lib/raix/configuration.rb#14
  def max_tool_calls=(value); end

  # source://raix//lib/raix/configuration.rb#7
  def model; end

  # source://raix//lib/raix/configuration.rb#14
  def model=(value); end

  # source://raix//lib/raix/configuration.rb#7
  def openai_client; end

  # source://raix//lib/raix/configuration.rb#14
  def openai_client=(value); end

  # source://raix//lib/raix/configuration.rb#7
  def openrouter_client; end

  # source://raix//lib/raix/configuration.rb#14
  def openrouter_client=(value); end

  # source://raix//lib/raix/configuration.rb#7
  def temperature; end

  # source://raix//lib/raix/configuration.rb#14
  def temperature=(value); end

  private

  # Returns the value of attribute fallback.
  #
  # source://raix//lib/raix/configuration.rb#65
  def fallback; end

  # Sets the attribute fallback
  #
  # @param value the value to set the attribute fallback to.
  #
  # source://raix//lib/raix/configuration.rb#65
  def fallback=(_arg0); end

  # source://raix//lib/raix/configuration.rb#67
  def get_with_fallback(method); end

  class << self
    # source://raix//lib/raix/configuration.rb#6
    def attr_accessor_with_fallback(method_name); end
  end
end

# source://raix//lib/raix/configuration.rb#44
Raix::Configuration::DEFAULT_MAX_COMPLETION_TOKENS = T.let(T.unsafe(nil), Integer)

# source://raix//lib/raix/configuration.rb#43
Raix::Configuration::DEFAULT_MAX_TOKENS = T.let(T.unsafe(nil), Integer)

# source://raix//lib/raix/configuration.rb#47
Raix::Configuration::DEFAULT_MAX_TOOL_CALLS = T.let(T.unsafe(nil), Integer)

# source://raix//lib/raix/configuration.rb#45
Raix::Configuration::DEFAULT_MODEL = T.let(T.unsafe(nil), String)

# source://raix//lib/raix/configuration.rb#46
Raix::Configuration::DEFAULT_TEMPERATURE = T.let(T.unsafe(nil), Float)

# Provides declarative function definition for ChatCompletion classes.
#
# Example:
#
#   class MeaningOfLife
#     include Raix::ChatCompletion
#     include Raix::FunctionDispatch
#
#     function :ask_deep_thought do
#       wait 236_682_000_000_000
#       "The meaning of life is 42"
#     end
#
#     def initialize
#       transcript << { user: "What is the meaning of life?" }
#       chat_completion
#     end
#   end
#
# source://raix//lib/raix/function_dispatch.rb#23
module Raix::FunctionDispatch
  extend ::ActiveSupport::Concern

  mixes_in_class_methods ::Raix::FunctionDispatch::ClassMethods

  # source://raix//lib/raix/function_dispatch.rb#114
  def chat_completion(**chat_completion_args); end

  # Stops the automatic continuation of chat completions after this function call.
  # Useful when you want to halt processing within a function and force the AI
  # to provide a text response without making additional tool calls.
  #
  # source://raix//lib/raix/function_dispatch.rb#122
  def stop_tool_calls_and_respond!; end

  # source://raix//lib/raix/function_dispatch.rb#126
  def tools; end
end

# source://raix//lib/raix/function_dispatch.rb#0
module Raix::FunctionDispatch::ClassMethods
  # source://raix//lib/raix/function_dispatch.rb#46
  def function(name, description = T.unsafe(nil), **parameters, &block); end

  # source://raix//lib/raix/function_dispatch.rb#27
  def functions; end
end

# Model Context Protocol integration for Raix
#
# Allows declaring MCP servers with a simple DSL that automatically:
# - Queries tools from the remote server
# - Exposes each tool as a function callable by LLMs
# - Handles transcript recording and response processing
#
# source://raix//lib/mcp/tool.rb#2
module Raix::MCP
  extend ::ActiveSupport::Concern

  mixes_in_class_methods ::Raix::MCP::ClassMethods

  private

  # Coerce argument types based on the JSON schema
  #
  # source://raix//lib/raix/mcp.rb#171
  def coerce_arguments(arguments, schema); end

  # Coerce a single value based on its schema
  #
  # source://raix//lib/raix/mcp.rb#196
  def coerce_value(value, schema); end
end

# source://raix//lib/raix/mcp.rb#0
module Raix::MCP::ClassMethods
  # source://raix//lib/raix/mcp.rb#73
  def mcp(client:, only: T.unsafe(nil), except: T.unsafe(nil)); end

  # source://raix//lib/raix/mcp.rb#44
  def sse_mcp(url, headers: T.unsafe(nil), only: T.unsafe(nil), except: T.unsafe(nil)); end

  # source://raix//lib/raix/mcp.rb#57
  def stdio_mcp(*args, env: T.unsafe(nil), only: T.unsafe(nil), except: T.unsafe(nil)); end
end

# source://raix//lib/raix/mcp.rb#35
Raix::MCP::JSONRPC_VERSION = T.let(T.unsafe(nil), String)

# Error raised when there's a protocol-level error in MCP communication
#
# source://raix//lib/raix/mcp.rb#33
class Raix::MCP::ProtocolError < ::StandardError; end

# Client for communicating with MCP servers via Server-Sent Events (SSE).
#
# source://raix//lib/mcp/sse_client.rb#11
class Raix::MCP::SseClient
  # Creates a new client and establishes SSE connection to discover the JSON-RPC endpoint.
  #
  # @param url [String] the SSE endpoint URL
  # @return [SseClient] a new instance of SseClient
  #
  # source://raix//lib/mcp/sse_client.rb#19
  def initialize(url, headers: T.unsafe(nil)); end

  # Executes a tool with given arguments.
  # Returns text content directly, or JSON-encoded data for other content types.
  #
  # source://raix//lib/mcp/sse_client.rb#48
  def call_tool(name, **arguments); end

  # Closes the connection to the server.
  #
  # source://raix//lib/mcp/sse_client.rb#81
  def close; end

  # Returns available tools from the server.
  #
  # source://raix//lib/mcp/sse_client.rb#33
  def tools; end

  # source://raix//lib/mcp/sse_client.rb#87
  def unique_key; end

  private

  # Builds an absolute URL for candidate relative to base.
  #
  # source://raix//lib/mcp/sse_client.rb#287
  def build_absolute_url(base, candidate); end

  # Establishes and maintains the SSE connection
  #
  # source://raix//lib/mcp/sse_client.rb#95
  def establish_sse_connection; end

  # Handle SSE message events
  #
  # source://raix//lib/mcp/sse_client.rb#155
  def handle_message_event(event_data); end

  # Initialize the MCP session
  #
  # source://raix//lib/mcp/sse_client.rb#175
  def initialize_mcp_session; end

  # Parses SSE event fields from raw text.
  #
  # source://raix//lib/mcp/sse_client.rb#270
  def parse_sse_fields(event_text); end

  # Process SSE buffer for complete events
  #
  # source://raix//lib/mcp/sse_client.rb#139
  def process_sse_buffer; end

  # Send a JSON-RPC request
  #
  # source://raix//lib/mcp/sse_client.rb#199
  def send_json_rpc(id, method, params); end

  # Send a notification (no response expected)
  #
  # source://raix//lib/mcp/sse_client.rb#221
  def send_notification(method, params); end

  # Wait for a response with a specific ID
  #
  # source://raix//lib/mcp/sse_client.rb#241
  def wait_for_response(request_id); end
end

# source://raix//lib/mcp/sse_client.rb#13
Raix::MCP::SseClient::CONNECTION_TIMEOUT = T.let(T.unsafe(nil), Integer)

# source://raix//lib/mcp/sse_client.rb#14
Raix::MCP::SseClient::OPEN_TIMEOUT = T.let(T.unsafe(nil), Integer)

# source://raix//lib/mcp/sse_client.rb#12
Raix::MCP::SseClient::PROTOCOL_VERSION = T.let(T.unsafe(nil), String)

# Client for communicating with MCP servers via stdio using JSON-RPC.
#
# source://raix//lib/mcp/stdio_client.rb#9
class Raix::MCP::StdioClient
  # Creates a new client with a bidirectional pipe to the MCP server.
  #
  # @return [StdioClient] a new instance of StdioClient
  #
  # source://raix//lib/mcp/stdio_client.rb#11
  def initialize(*args, env); end

  # Executes a tool with given arguments.
  # Returns text content directly, or JSON-encoded data for other content types.
  #
  # source://raix//lib/mcp/stdio_client.rb#27
  def call_tool(name, **arguments); end

  # Closes the connection to the server.
  #
  # source://raix//lib/mcp/stdio_client.rb#56
  def close; end

  # Returns available tools from the server.
  #
  # source://raix//lib/mcp/stdio_client.rb#17
  def tools; end

  # source://raix//lib/mcp/stdio_client.rb#60
  def unique_key; end

  private

  # Sends JSON-RPC request and returns the result.
  #
  # source://raix//lib/mcp/stdio_client.rb#68
  def call(method, **params); end
end

# Represents an MCP (Model Context Protocol) tool with metadata and schema
#
# @example
#   tool = Tool.new(
#   name: "weather",
#   description: "Get weather info",
#   input_schema: { "type" => "object", "properties" => { "city" => { "type" => "string" } } }
#   )
#
# source://raix//lib/mcp/tool.rb#11
class Raix::MCP::Tool
  # Initialize a new Tool
  #
  # @param name [String] the tool name
  # @param description [String] human-readable description of what the tool does
  # @param input_schema [Hash] JSON schema defining the tool's input parameters
  # @return [Tool] a new instance of Tool
  #
  # source://raix//lib/mcp/tool.rb#19
  def initialize(name:, description:, input_schema: T.unsafe(nil)); end

  # Returns the value of attribute description.
  #
  # source://raix//lib/mcp/tool.rb#12
  def description; end

  # Returns the value of attribute input_schema.
  #
  # source://raix//lib/mcp/tool.rb#12
  def input_schema; end

  # Get the input schema type
  #
  # @return [String, nil] the schema type (e.g., "object")
  #
  # source://raix//lib/mcp/tool.rb#40
  def input_type; end

  # Returns the value of attribute name.
  #
  # source://raix//lib/mcp/tool.rb#12
  def name; end

  # Get the properties hash
  #
  # @return [Hash] schema properties definition
  #
  # source://raix//lib/mcp/tool.rb#47
  def properties; end

  # Check if a property is required
  #
  # @param property_name [String] name of the property to check
  # @return [Boolean] true if the property is required
  #
  # source://raix//lib/mcp/tool.rb#62
  def required?(property_name); end

  # Get required properties array
  #
  # @return [Array<String>] list of required property names
  #
  # source://raix//lib/mcp/tool.rb#54
  def required_properties; end

  class << self
    # Initialize from raw MCP JSON response
    #
    # @param json [Hash] parsed JSON data from MCP response
    # @return [Tool] new Tool instance
    #
    # source://raix//lib/mcp/tool.rb#29
    def from_json(json); end
  end
end

# source://raix//lib/raix/message_adapters/base.rb#6
module Raix::MessageAdapters; end

# Transforms messages into the format expected by the OpenAI API
#
# source://raix//lib/raix/message_adapters/base.rb#8
class Raix::MessageAdapters::Base
  # @return [Base] a new instance of Base
  #
  # source://raix//lib/raix/message_adapters/base.rb#13
  def initialize(context); end

  # source://raix//lib/raix/message_adapters/base.rb#11
  def cache_at(*_arg0, **_arg1, &_arg2); end

  # Returns the value of attribute context.
  #
  # source://raix//lib/raix/message_adapters/base.rb#9
  def context; end

  # Sets the attribute context
  #
  # @param value the value to set the attribute context to.
  #
  # source://raix//lib/raix/message_adapters/base.rb#9
  def context=(_arg0); end

  # source://raix//lib/raix/message_adapters/base.rb#11
  def model(*_arg0, **_arg1, &_arg2); end

  # source://raix//lib/raix/message_adapters/base.rb#17
  def transform(message); end

  protected

  # source://raix//lib/raix/message_adapters/base.rb#31
  def content(message); end
end

# A module for handling yes/no questions using AI chat completion.
# When included in a class, it provides methods to define handlers for
# yes and no responses. All handlers are optional. Any response that
# does not begin with "yes, " or "no, " will be considered a maybe.
#
# @example
#   class Question
#   include Raix::Predicate
#
#   yes? do |explanation|
#   puts "Yes: #{explanation}"
#   end
#
#   no? do |explanation|
#   puts "No: #{explanation}"
#   end
#
#   maybe? do |explanation|
#   puts "Maybe: #{explanation}"
#   end
#   end
#
#   question = Question.new
#   question.ask("Is Ruby a programming language?")
#
# source://raix//lib/raix/predicate.rb#28
module Raix::Predicate
  extend ::ActiveSupport::Concern
  include ::Raix::ChatCompletion

  mixes_in_class_methods ::Raix::ChatCompletion::ClassMethods
  mixes_in_class_methods ::Raix::Predicate::ClassMethods

  # source://raix//lib/raix/predicate.rb#32
  def ask(question, openai: T.unsafe(nil)); end
end

# Class methods added to the including class
#
# source://raix//lib/raix/predicate.rb#52
module Raix::Predicate::ClassMethods
  # @return [Boolean]
  #
  # source://raix//lib/raix/predicate.rb#63
  def maybe?(&block); end

  # Returns the value of attribute maybe_block.
  #
  # source://raix//lib/raix/predicate.rb#53
  def maybe_block; end

  # @return [Boolean]
  #
  # source://raix//lib/raix/predicate.rb#59
  def no?(&block); end

  # Returns the value of attribute no_block.
  #
  # source://raix//lib/raix/predicate.rb#53
  def no_block; end

  # @return [Boolean]
  #
  # source://raix//lib/raix/predicate.rb#55
  def yes?(&block); end

  # Returns the value of attribute yes_block.
  #
  # source://raix//lib/raix/predicate.rb#53
  def yes_block; end
end

# The PromptDeclarations module provides a way to chain prompts and handle
# user responses in a serialized manner, with support for
# functions if the FunctionDispatch module is also included.
#
# source://raix//lib/raix/prompt_declarations.rb#12
module Raix::PromptDeclarations
  extend ::ActiveSupport::Concern

  mixes_in_class_methods ::Raix::PromptDeclarations::ClassMethods

  # Executes the chat completion process based on the class-level declared prompts.
  # The response to each prompt is added to the transcript automatically and returned.
  #
  # Raises an error if there are not enough prompts defined.
  #
  # Uses system prompt in following order of priority:
  #   - system lambda specified in the prompt declaration
  #   - system_prompt instance method if defined
  #   - system_prompt class-level declaration if defined
  #
  #  Prompts require a text lambda to be defined at minimum.
  #  TODO: shortcut syntax passes just a string prompt if no other options are needed.
  #
  # TODO: SHOULD NOT HAVE A DIFFERENT INTERFACE THAN PARENT
  #
  # @param prompt [String] The prompt to use for the chat completion.
  # @param params [Hash] Parameters for the chat completion.
  # @param raw [Boolean] Whether to return the raw response.
  # @raise [RuntimeError] If no prompts are defined.
  #
  # source://raix//lib/raix/prompt_declarations.rb#66
  def chat_completion(prompt = T.unsafe(nil), params: T.unsafe(nil), raw: T.unsafe(nil), openai: T.unsafe(nil)); end

  # Returns the value of attribute current_prompt.
  #
  # source://raix//lib/raix/prompt_declarations.rb#42
  def current_prompt; end

  # source://raix//lib/raix/prompt_declarations.rb#125
  def execute_ai_request(params:, raw:, openai:, transcript:, loop_count:); end

  # Returns the value of attribute last_response.
  #
  # source://raix//lib/raix/prompt_declarations.rb#42
  def last_response; end

  # Returns the max_tokens parameter of the current prompt or the default max_tokens.
  #
  # @return [Integer] The max_tokens parameter of the current prompt or the default max_tokens.
  #
  # source://raix//lib/raix/prompt_declarations.rb#155
  def max_tokens; end

  # Returns the model parameter of the current prompt or the default model.
  #
  # @return [Object] The model parameter of the current prompt or the default model.
  #
  # source://raix//lib/raix/prompt_declarations.rb#141
  def model; end

  # Returns the temperature parameter of the current prompt or the default temperature.
  #
  # @return [Float] The temperature parameter of the current prompt or the default temperature.
  #
  # source://raix//lib/raix/prompt_declarations.rb#148
  def temperature; end

  protected

  # workaround for super.chat_completion, which is not available in ruby
  #
  # source://raix//lib/raix/prompt_declarations.rb#162
  def chat_completion_from_superclass(*_arg0, **kargs); end
end

# source://raix//lib/raix/prompt_declarations.rb#15
module Raix::PromptDeclarations::ClassMethods
  # Adds a prompt to the list of prompts. At minimum, provide a `text` or `call` parameter.
  #
  # @param system [Proc] A lambda that generates the system message.
  # @param call [ChatCompletion] A callable class that includes ChatCompletion. Will be passed a context object when initialized.
  # @param text Accepts 1) a lambda that returns the prompt text, 2) a string, or 3) a symbol that references a method.
  # @param stream [Proc] A lambda stream handler
  # @param success [Proc] The block of code to execute when the prompt is answered.
  # @param params [Hash] Additional parameters for the completion API call
  # @param if [Proc] A lambda that determines if the prompt should be executed.
  #
  # source://raix//lib/raix/prompt_declarations.rb#25
  def prompt(system: T.unsafe(nil), call: T.unsafe(nil), text: T.unsafe(nil), stream: T.unsafe(nil), success: T.unsafe(nil), params: T.unsafe(nil), if: T.unsafe(nil), unless: T.unsafe(nil), until: T.unsafe(nil)); end

  # source://raix//lib/raix/prompt_declarations.rb#37
  def prompts; end
end

# source://raix//lib/raix/prompt_declarations.rb#44
Raix::PromptDeclarations::MAX_LOOP_COUNT = T.let(T.unsafe(nil), Integer)

# Handles the formatting of responses for AI interactions.
#
# This class is responsible for converting input data into a JSON schema
# that can be used to structure and validate AI responses. It supports
# nested structures and arrays, ensuring that the output conforms to
# the expected format for AI model interactions.
#
# @attr_reader name [String] The name of the response format
# @attr_reader input [Hash] The input data to be formatted
# @example
#   input = { name: { type: "string" }, age: { type: "integer" } }
#   format = ResponseFormat.new("PersonInfo", input)
#   schema = format.to_schema
#
# source://raix//lib/raix/response_format.rb#21
class Raix::ResponseFormat
  # @return [ResponseFormat] a new instance of ResponseFormat
  #
  # source://raix//lib/raix/response_format.rb#22
  def initialize(name, input); end

  # source://raix//lib/raix/response_format.rb#27
  def to_json(*_arg0); end

  # source://raix//lib/raix/response_format.rb#31
  def to_schema; end

  private

  # source://raix//lib/raix/response_format.rb#49
  def decode(input); end
end

# source://raix//lib/raix/chat_completion.rb#12
class Raix::UndeclaredToolError < ::StandardError; end

# source://raix//lib/raix/version.rb#4
Raix::VERSION = T.let(T.unsafe(nil), String)
