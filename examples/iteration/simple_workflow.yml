name: Ruby Method Counter
tools:
  - Roast::Tools::ReadFile
  - Roast::Tools::Grep
  - Roast::Tools::WriteFile
  - Roast::Tools::CodingAgent

steps:
  # Find all Ruby files in the specified directory
  - find_ruby_files:
      $(find lib/roast/workflow -type f -name "*.rb")

  # Initialize a report object to store our results
  - initialize_report:
      $(echo '{"files_analyzed": 0, "total_methods": 0, "results": []}')

  # Process each file found
  - each: "{{output['find_ruby_files'].split('\n')}}"
    as: "current_file"
    steps:
      # Read the file content
      - read_file:
          prompt: examples/iteration/prompts/analyze_file
          model: claude-3-haiku-20240307
          vars:
            file_path: "{{ current_file }}"

      # Update the report with the analysis result
      - update_report:
          prompt: examples/iteration/prompts/update_report
          model: claude-3-haiku-20240307
          vars:
            file_path: "{{ current_file }}"
            method_count: "{{ output['read_file']['method_count'] }}"
            current_report: "{{ output['initialize_report'] }}"

  # Generate the summary report after processing all files
  - report_count:
      $(echo "{{ output.initialize_report.files_analyzed }}")

  # Repeat to generate the final summary - demonstrates the repeat construct
  - repeat:
      steps:
        - generate_summary:
            prompt: examples/iteration/prompts/generate_summary
            model: claude-3-haiku-20240307
            vars:
              report_data: "{{ output['initialize_report'] }}"
      until: "{{true}}"
      max_iterations: 1

  # Write the report to a file
  - write_report:
      prompt: examples/iteration/prompts/write_report
      model: claude-3-haiku-20240307
      vars:
        report_data: "{{ output['initialize_report'] }}"
        summary: "{{ output['generate_summary']['summary'] }}"