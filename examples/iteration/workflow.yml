name: Code Quality Analyzer
tools:
  - Roast::Tools::ReadFile
  - Roast::Tools::Grep
  - Roast::Tools::WriteFile
  - Roast::Tools::UpdateFiles
  - Roast::Tools::CodingAgent
  - Roast::Tools::Cmd

steps:
  # Get all Ruby files from the target directory
  - get_files_to_analyze:
      $(find {{resource.target}} -name "*.rb" -not -path "*/vendor/*" | grep -v "test")

  # Analyze each file and generate improvement recommendations
  - each: "{{output['get_files_to_analyze'].split('\n')}}"
    as: "current_file"
    steps:
      - read_file:
          $(cat {{current_file}})
      - analyze_complexity
      - generate_recommendations

  # After analyzing all files, sort issues by priority
  - prioritize_issues
  
  # Process the highest priority issues first, until we've addressed a sufficient number
  # or reached our iteration limit
  - initialize_fixes:
      $(echo "0")
  
  - repeat:
      steps:
        - select_next_issue
        - implement_fix
        - verify_fix
        - update_fix_count
      until: "{{output['update_fix_count']['fixes_applied'] >= 5 || output['select_next_issue']['no_issues_left'] == true}}"
      max_iterations: 10
  
  # Generate a summary report of all changes made
  - generate_report