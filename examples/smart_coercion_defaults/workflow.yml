name: Smart Coercion Defaults Demo
description: Demonstrates how different step types get smart boolean coercion defaults

steps:
  # Example 1: Ruby expressions default to regular boolean coercion
  - set_counter: 
      value: 3
  
  - repeat:
      until: "{{counter >= 5}}"  # Ruby expression defaults to boolean
      steps:
        - increment_counter: 
            value: "{{counter + 1}}"
        - log: "Counter is now {{counter}}"
  
  # Example 2: Bash commands default to exit code interpretation
  - check_file_exists:
      repeat:
        until: "$(ls /tmp/important_file 2>/dev/null)"  # Bash command defaults to exit code
        max_iterations: 3
        steps:
          - create_file: "$(mkdir -p /tmp && touch /tmp/important_file)"
          - log: "Waiting for file to exist..."
  
  # Example 3: Prompt/step names default to LLM boolean interpretation
  - ask_user_ready:
      prompt: "Are you ready to continue? Please respond yes or no."
  
  - conditional:
      if: "ask_user_ready"  # Step name defaults to llm_boolean
      then:
        - proceed: "Great! Let's continue..."
      else:
        - wait: "Okay, take your time."
  
  # Example 4: Explicit coerce_to overrides smart defaults
  - get_items:
      prompt: "List three fruits, one per line"
  
  - each: "get_items"
    as: "fruit"
    coerce_to: iterable  # Override default llm_boolean to iterable
    steps:
      - process_fruit: "Processing {{fruit}}"