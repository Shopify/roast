# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `claude_swarm` gem.
# Please instead update this file by running `bin/tapioca gem claude_swarm`.


# source://claude_swarm//lib/claude_swarm/version.rb#3
module ClaudeSwarm; end

# source://claude_swarm//lib/claude_swarm/cli.rb#11
class ClaudeSwarm::CLI < ::Thor
  # source://claude_swarm//lib/claude_swarm/cli.rb#254
  def clean; end

  # source://claude_swarm//lib/claude_swarm/cli.rb#208
  def generate; end

  # source://claude_swarm//lib/claude_swarm/cli.rb#140
  def init; end

  # source://claude_swarm//lib/claude_swarm/cli.rb#318
  def list_sessions; end

  # source://claude_swarm//lib/claude_swarm/cli.rb#106
  def mcp_serve; end

  # source://claude_swarm//lib/claude_swarm/cli.rb#240
  def ps; end

  # source://claude_swarm//lib/claude_swarm/cli.rb#246
  def show(session_id); end

  # source://claude_swarm//lib/claude_swarm/cli.rb#32
  def start(config_file = T.unsafe(nil)); end

  # source://claude_swarm//lib/claude_swarm/cli.rb#235
  def version; end

  # source://claude_swarm//lib/claude_swarm/cli.rb#289
  def watch(session_id); end

  private

  # source://claude_swarm//lib/claude_swarm/cli.rb#480
  def build_generation_prompt(readme_content, output_file); end

  # source://claude_swarm//lib/claude_swarm/cli.rb#392
  def error(message); end

  # source://claude_swarm//lib/claude_swarm/cli.rb#465
  def find_session_path(session_id); end

  # source://claude_swarm//lib/claude_swarm/cli.rb#396
  def restore_session(session_id); end

  class << self
    # @return [Boolean]
    #
    # source://claude_swarm//lib/claude_swarm/cli.rb#12
    def exit_on_failure?; end
  end
end

# source://claude_swarm//lib/claude_swarm/claude_code_executor.rb#10
class ClaudeSwarm::ClaudeCodeExecutor
  # @return [ClaudeCodeExecutor] a new instance of ClaudeCodeExecutor
  #
  # source://claude_swarm//lib/claude_swarm/claude_code_executor.rb#13
  def initialize(working_directory: T.unsafe(nil), model: T.unsafe(nil), mcp_config: T.unsafe(nil), vibe: T.unsafe(nil), instance_name: T.unsafe(nil), instance_id: T.unsafe(nil), calling_instance: T.unsafe(nil), calling_instance_id: T.unsafe(nil), claude_session_id: T.unsafe(nil), additional_directories: T.unsafe(nil)); end

  # source://claude_swarm//lib/claude_swarm/claude_code_executor.rb#32
  def execute(prompt, options = T.unsafe(nil)); end

  # @return [Boolean]
  #
  # source://claude_swarm//lib/claude_swarm/claude_code_executor.rb#97
  def has_session?; end

  # Returns the value of attribute last_response.
  #
  # source://claude_swarm//lib/claude_swarm/claude_code_executor.rb#11
  def last_response; end

  # Returns the value of attribute logger.
  #
  # source://claude_swarm//lib/claude_swarm/claude_code_executor.rb#11
  def logger; end

  # source://claude_swarm//lib/claude_swarm/claude_code_executor.rb#92
  def reset_session; end

  # Returns the value of attribute session_id.
  #
  # source://claude_swarm//lib/claude_swarm/claude_code_executor.rb#11
  def session_id; end

  # Returns the value of attribute session_path.
  #
  # source://claude_swarm//lib/claude_swarm/claude_code_executor.rb#11
  def session_path; end

  # Returns the value of attribute working_directory.
  #
  # source://claude_swarm//lib/claude_swarm/claude_code_executor.rb#11
  def working_directory; end

  private

  # source://claude_swarm//lib/claude_swarm/claude_code_executor.rb#227
  def append_to_session_json(event); end

  # source://claude_swarm//lib/claude_swarm/claude_code_executor.rb#255
  def build_command_array(prompt, options); end

  # source://claude_swarm//lib/claude_swarm/claude_code_executor.rb#198
  def log_assistant_message(msg); end

  # source://claude_swarm//lib/claude_swarm/claude_code_executor.rb#147
  def log_request(prompt); end

  # source://claude_swarm//lib/claude_swarm/claude_code_executor.rb#168
  def log_response(response); end

  # source://claude_swarm//lib/claude_swarm/claude_code_executor.rb#178
  def log_streaming_event(event); end

  # source://claude_swarm//lib/claude_swarm/claude_code_executor.rb#194
  def log_system_message(event); end

  # source://claude_swarm//lib/claude_swarm/claude_code_executor.rb#223
  def log_user_message(content); end

  # source://claude_swarm//lib/claude_swarm/claude_code_executor.rb#124
  def setup_logging; end

  # source://claude_swarm//lib/claude_swarm/claude_code_executor.rb#103
  def write_instance_state; end
end

# source://claude_swarm//lib/claude_swarm/claude_code_executor.rb#312
class ClaudeSwarm::ClaudeCodeExecutor::ExecutionError < ::StandardError; end

# source://claude_swarm//lib/claude_swarm/claude_code_executor.rb#313
class ClaudeSwarm::ClaudeCodeExecutor::ParseError < ::StandardError; end

# source://claude_swarm//lib/claude_swarm/claude_mcp_server.rb#12
class ClaudeSwarm::ClaudeMcpServer
  # @return [ClaudeMcpServer] a new instance of ClaudeMcpServer
  #
  # source://claude_swarm//lib/claude_swarm/claude_mcp_server.rb#18
  def initialize(instance_config, calling_instance:, calling_instance_id: T.unsafe(nil)); end

  # source://claude_swarm//lib/claude_swarm/claude_mcp_server.rb#44
  def start; end

  class << self
    # Returns the value of attribute calling_instance.
    #
    # source://claude_swarm//lib/claude_swarm/claude_mcp_server.rb#15
    def calling_instance; end

    # Sets the attribute calling_instance
    #
    # @param value the value to set the attribute calling_instance to.
    #
    # source://claude_swarm//lib/claude_swarm/claude_mcp_server.rb#15
    def calling_instance=(_arg0); end

    # Returns the value of attribute calling_instance_id.
    #
    # source://claude_swarm//lib/claude_swarm/claude_mcp_server.rb#15
    def calling_instance_id; end

    # Sets the attribute calling_instance_id
    #
    # @param value the value to set the attribute calling_instance_id to.
    #
    # source://claude_swarm//lib/claude_swarm/claude_mcp_server.rb#15
    def calling_instance_id=(_arg0); end

    # Returns the value of attribute executor.
    #
    # source://claude_swarm//lib/claude_swarm/claude_mcp_server.rb#15
    def executor; end

    # Sets the attribute executor
    #
    # @param value the value to set the attribute executor to.
    #
    # source://claude_swarm//lib/claude_swarm/claude_mcp_server.rb#15
    def executor=(_arg0); end

    # Returns the value of attribute instance_config.
    #
    # source://claude_swarm//lib/claude_swarm/claude_mcp_server.rb#15
    def instance_config; end

    # Sets the attribute instance_config
    #
    # @param value the value to set the attribute instance_config to.
    #
    # source://claude_swarm//lib/claude_swarm/claude_mcp_server.rb#15
    def instance_config=(_arg0); end

    # Returns the value of attribute logger.
    #
    # source://claude_swarm//lib/claude_swarm/claude_mcp_server.rb#15
    def logger; end

    # Sets the attribute logger
    #
    # @param value the value to set the attribute logger to.
    #
    # source://claude_swarm//lib/claude_swarm/claude_mcp_server.rb#15
    def logger=(_arg0); end

    # Returns the value of attribute session_path.
    #
    # source://claude_swarm//lib/claude_swarm/claude_mcp_server.rb#15
    def session_path; end

    # Sets the attribute session_path
    #
    # @param value the value to set the attribute session_path to.
    #
    # source://claude_swarm//lib/claude_swarm/claude_mcp_server.rb#15
    def session_path=(_arg0); end
  end
end

# source://claude_swarm//lib/claude_swarm/configuration.rb#7
class ClaudeSwarm::Configuration
  # @return [Configuration] a new instance of Configuration
  #
  # source://claude_swarm//lib/claude_swarm/configuration.rb#10
  def initialize(config_path, base_dir: T.unsafe(nil)); end

  # source://claude_swarm//lib/claude_swarm/configuration.rb#29
  def before_commands; end

  # Returns the value of attribute config.
  #
  # source://claude_swarm//lib/claude_swarm/configuration.rb#8
  def config; end

  # Returns the value of attribute config_path.
  #
  # source://claude_swarm//lib/claude_swarm/configuration.rb#8
  def config_path; end

  # source://claude_swarm//lib/claude_swarm/configuration.rb#25
  def connections_for(instance_name); end

  # source://claude_swarm//lib/claude_swarm/configuration.rb#21
  def instance_names; end

  # Returns the value of attribute instances.
  #
  # source://claude_swarm//lib/claude_swarm/configuration.rb#8
  def instances; end

  # Returns the value of attribute main_instance.
  #
  # source://claude_swarm//lib/claude_swarm/configuration.rb#8
  def main_instance; end

  # source://claude_swarm//lib/claude_swarm/configuration.rb#17
  def main_instance_config; end

  # Returns the value of attribute swarm.
  #
  # source://claude_swarm//lib/claude_swarm/configuration.rb#8
  def swarm; end

  # Returns the value of attribute swarm_name.
  #
  # source://claude_swarm//lib/claude_swarm/configuration.rb#8
  def swarm_name; end

  private

  # source://claude_swarm//lib/claude_swarm/configuration.rb#141
  def detect_circular_dependencies; end

  # source://claude_swarm//lib/claude_swarm/configuration.rb#149
  def detect_cycle_from(instance_name, visited, path); end

  # source://claude_swarm//lib/claude_swarm/configuration.rb#193
  def expand_path(path); end

  # source://claude_swarm//lib/claude_swarm/configuration.rb#35
  def load_and_validate; end

  # source://claude_swarm//lib/claude_swarm/configuration.rb#182
  def parse_directories(directory_config); end

  # @raise [Error]
  #
  # source://claude_swarm//lib/claude_swarm/configuration.rb#79
  def parse_instance(name, config); end

  # source://claude_swarm//lib/claude_swarm/configuration.rb#113
  def parse_mcps(mcps); end

  # source://claude_swarm//lib/claude_swarm/configuration.rb#67
  def parse_swarm; end

  # @raise [Error]
  #
  # source://claude_swarm//lib/claude_swarm/configuration.rb#197
  def parse_worktree_value(value); end

  # source://claude_swarm//lib/claude_swarm/configuration.rb#133
  def validate_connections; end

  # source://claude_swarm//lib/claude_swarm/configuration.rb#166
  def validate_directories; end

  # @raise [Error]
  #
  # source://claude_swarm//lib/claude_swarm/configuration.rb#120
  def validate_mcp(mcp); end

  # @raise [Error]
  #
  # source://claude_swarm//lib/claude_swarm/configuration.rb#53
  def validate_swarm; end

  # @raise [Error]
  #
  # source://claude_swarm//lib/claude_swarm/configuration.rb#175
  def validate_tool_field(instance_name, config, field_name); end

  # @raise [Error]
  #
  # source://claude_swarm//lib/claude_swarm/configuration.rb#47
  def validate_version; end
end

# source://claude_swarm//lib/claude_swarm.rb#17
class ClaudeSwarm::Error < ::StandardError; end

# source://claude_swarm//lib/claude_swarm/mcp_generator.rb#10
class ClaudeSwarm::McpGenerator
  # @return [McpGenerator] a new instance of McpGenerator
  #
  # source://claude_swarm//lib/claude_swarm/mcp_generator.rb#11
  def initialize(configuration, vibe: T.unsafe(nil), restore_session_path: T.unsafe(nil)); end

  # source://claude_swarm//lib/claude_swarm/mcp_generator.rb#20
  def generate_all; end

  # source://claude_swarm//lib/claude_swarm/mcp_generator.rb#38
  def mcp_config_path(instance_name); end

  private

  # source://claude_swarm//lib/claude_swarm/mcp_generator.rb#98
  def build_instance_mcp_config(name, instance, calling_instance:, calling_instance_id:); end

  # source://claude_swarm//lib/claude_swarm/mcp_generator.rb#80
  def build_mcp_server_config(mcp); end

  # source://claude_swarm//lib/claude_swarm/mcp_generator.rb#48
  def ensure_swarm_directory; end

  # source://claude_swarm//lib/claude_swarm/mcp_generator.rb#54
  def generate_mcp_config(name, instance); end

  # source://claude_swarm//lib/claude_swarm/mcp_generator.rb#147
  def load_instance_states; end

  # source://claude_swarm//lib/claude_swarm/mcp_generator.rb#44
  def session_path; end
end

# source://claude_swarm//lib/claude_swarm/orchestrator.rb#12
class ClaudeSwarm::Orchestrator
  # @return [Orchestrator] a new instance of Orchestrator
  #
  # source://claude_swarm//lib/claude_swarm/orchestrator.rb#15
  def initialize(configuration, mcp_generator, vibe: T.unsafe(nil), prompt: T.unsafe(nil), stream_logs: T.unsafe(nil), debug: T.unsafe(nil), restore_session_path: T.unsafe(nil), worktree: T.unsafe(nil)); end

  # source://claude_swarm//lib/claude_swarm/orchestrator.rb#36
  def start; end

  private

  # source://claude_swarm//lib/claude_swarm/orchestrator.rb#365
  def build_main_command(instance); end

  # source://claude_swarm//lib/claude_swarm/orchestrator.rb#295
  def cleanup_processes; end

  # source://claude_swarm//lib/claude_swarm/orchestrator.rb#329
  def cleanup_run_symlink; end

  # source://claude_swarm//lib/claude_swarm/orchestrator.rb#302
  def cleanup_worktrees; end

  # source://claude_swarm//lib/claude_swarm/orchestrator.rb#310
  def create_run_symlink; end

  # source://claude_swarm//lib/claude_swarm/orchestrator.rb#204
  def execute_before_commands(commands); end

  # source://claude_swarm//lib/claude_swarm/orchestrator.rb#445
  def restore_worktrees_if_needed(session_path); end

  # source://claude_swarm//lib/claude_swarm/orchestrator.rb#259
  def save_swarm_config_path(session_path); end

  # source://claude_swarm//lib/claude_swarm/orchestrator.rb#283
  def setup_signal_handlers; end

  # source://claude_swarm//lib/claude_swarm/orchestrator.rb#339
  def start_log_streaming; end
end

# source://claude_swarm//lib/claude_swarm/orchestrator.rb#13
ClaudeSwarm::Orchestrator::RUN_DIR = T.let(T.unsafe(nil), String)

# source://claude_swarm//lib/claude_swarm/process_tracker.rb#6
class ClaudeSwarm::ProcessTracker
  # @return [ProcessTracker] a new instance of ProcessTracker
  #
  # source://claude_swarm//lib/claude_swarm/process_tracker.rb#9
  def initialize(session_path); end

  # source://claude_swarm//lib/claude_swarm/process_tracker.rb#20
  def cleanup_all; end

  # source://claude_swarm//lib/claude_swarm/process_tracker.rb#15
  def track_pid(pid, name); end

  private

  # source://claude_swarm//lib/claude_swarm/process_tracker.rb#74
  def ensure_pids_directory; end

  class << self
    # source://claude_swarm//lib/claude_swarm/process_tracker.rb#65
    def cleanup_session(session_path); end
  end
end

# source://claude_swarm//lib/claude_swarm/process_tracker.rb#7
ClaudeSwarm::ProcessTracker::PIDS_DIR = T.let(T.unsafe(nil), String)

# source://claude_swarm//lib/claude_swarm/reset_session_tool.rb#4
class ClaudeSwarm::ResetSessionTool < ::FastMcp::Tool
  # source://claude_swarm//lib/claude_swarm/reset_session_tool.rb#12
  def call; end
end

# source://claude_swarm//lib/claude_swarm/session_info_tool.rb#4
class ClaudeSwarm::SessionInfoTool < ::FastMcp::Tool
  # source://claude_swarm//lib/claude_swarm/session_info_tool.rb#12
  def call; end
end

# source://claude_swarm//lib/claude_swarm/session_path.rb#6
module ClaudeSwarm::SessionPath
  class << self
    # Ensure the session directory exists
    #
    # source://claude_swarm//lib/claude_swarm/session_path.rb#36
    def ensure_directory(session_path); end

    # Get the session path from environment (required)
    #
    # source://claude_swarm//lib/claude_swarm/session_path.rb#45
    def from_env; end

    # Generate a full session path for a given directory and timestamp
    #
    # source://claude_swarm//lib/claude_swarm/session_path.rb#30
    def generate(working_dir: T.unsafe(nil), timestamp: T.unsafe(nil)); end

    # Convert a directory path to a safe folder name using + as separator
    #
    # source://claude_swarm//lib/claude_swarm/session_path.rb#15
    def project_folder_name(working_dir = T.unsafe(nil)); end

    # source://claude_swarm//lib/claude_swarm/session_path.rb#10
    def swarm_home; end
  end
end

# source://claude_swarm//lib/claude_swarm/session_path.rb#7
ClaudeSwarm::SessionPath::SESSIONS_DIR = T.let(T.unsafe(nil), String)

# source://claude_swarm//lib/claude_swarm/task_tool.rb#4
class ClaudeSwarm::TaskTool < ::FastMcp::Tool
  # source://claude_swarm//lib/claude_swarm/task_tool.rb#15
  def call(prompt:, new_session: T.unsafe(nil), system_prompt: T.unsafe(nil)); end
end

# source://claude_swarm//lib/claude_swarm/version.rb#4
ClaudeSwarm::VERSION = T.let(T.unsafe(nil), String)

# source://claude_swarm//lib/claude_swarm/worktree_manager.rb#10
class ClaudeSwarm::WorktreeManager
  # @return [WorktreeManager] a new instance of WorktreeManager
  #
  # source://claude_swarm//lib/claude_swarm/worktree_manager.rb#13
  def initialize(cli_worktree_option = T.unsafe(nil), session_id: T.unsafe(nil)); end

  # source://claude_swarm//lib/claude_swarm/worktree_manager.rb#112
  def cleanup_worktrees; end

  # Returns the value of attribute created_worktrees.
  #
  # source://claude_swarm//lib/claude_swarm/worktree_manager.rb#11
  def created_worktrees; end

  # source://claude_swarm//lib/claude_swarm/worktree_manager.rb#71
  def map_to_worktree_path(original_path, worktree_name); end

  # source://claude_swarm//lib/claude_swarm/worktree_manager.rb#144
  def session_metadata; end

  # source://claude_swarm//lib/claude_swarm/worktree_manager.rb#26
  def setup_worktrees(instances); end

  # Returns the value of attribute shared_worktree_name.
  #
  # source://claude_swarm//lib/claude_swarm/worktree_manager.rb#11
  def shared_worktree_name; end

  # Deprecated method for backward compatibility
  #
  # source://claude_swarm//lib/claude_swarm/worktree_manager.rb#154
  def worktree_name; end

  private

  # source://claude_swarm//lib/claude_swarm/worktree_manager.rb#196
  def collect_worktrees_to_create(instances); end

  # @raise [Error]
  #
  # source://claude_swarm//lib/claude_swarm/worktree_manager.rb#241
  def create_worktree(repo_root, worktree_name); end

  # source://claude_swarm//lib/claude_swarm/worktree_manager.rb#171
  def determine_worktree_config(instance); end

  # source://claude_swarm//lib/claude_swarm/worktree_manager.rb#335
  def find_base_branch(repo_path); end

  # source://claude_swarm//lib/claude_swarm/worktree_manager.rb#229
  def find_git_root(path); end

  # source://claude_swarm//lib/claude_swarm/worktree_manager.rb#160
  def generate_worktree_name; end

  # @return [Boolean]
  #
  # source://claude_swarm//lib/claude_swarm/worktree_manager.rb#285
  def has_uncommitted_changes?(worktree_path); end

  # @return [Boolean]
  #
  # source://claude_swarm//lib/claude_swarm/worktree_manager.rb#294
  def has_unpushed_commits?(worktree_path); end
end
